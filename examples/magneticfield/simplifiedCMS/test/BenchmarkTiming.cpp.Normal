#include "iostream"
#include "MagField.h"
#include "base/Vector3D.h"
#include "base/SOA3D.h"
#include "base/Global.h"
#include <string>
#include <vector>
#include <ctime>
#include <cmath> //for sqrt
#include <stdlib.h>
#include <Vc/Vc>
#include "backend/vc/Backend.h"
#include "backend/vcfloat/Backend.h"
#include "base/Vector.h"

using namespace std;
typedef vecgeom::Vector3D<float> ThreeVector; //normal Vector3D
typedef vecgeom::Vector3D<vecgeom::kVcFloat::precision_v> ThreeVecSimd_t;
typedef vecgeom::Vector<float> VcVectorFloat;


const float kRMax=9000;
const float kZMax= 16000;

float RandR(){
    float r = (float) rand()/(RAND_MAX) ;
    r = r*kRMax; //because r is in range (0,9000) mm                                                                          
    return r;
}

float RandZ(){
    float z = (float) rand()/(RAND_MAX) ;
    z = z*kZMax; //range of z is between -16k and 16k                                                                         
    int sign = rand()%2; //to define the sign, since it can be both positive and negative                                     
    if (sign==0){
            z= -z;
    }
    return z;
}

void GenVecCartSubR(float &x, float &y){
    x = RandR();
    y = RandR();
    if((x*x + y*y)> kRMax*kRMax){
        GenVecCartSubR(x,y);
    }
}

void GenVecCart(ThreeVector &pos){
    float x=0,y=0;
    float z = RandZ();
    GenVecCartSubR(x, y);
    pos.x()=x;
    pos.y()=y;
    pos.z()=z;
}

void GenVecCart(vecgeom::Vector<ThreeVector> &posVec, const int &n){
    for (int i = 0; i < n; ++i)
    {       
        ThreeVector pos;
        GenVecCart(pos);
        posVec.push_back(pos);


    }
}

float TimeScalar(MagField &m1, const vecgeom::Vector<ThreeVector> &posVec, const int &n, const int &nRepetitions){
    ThreeVector sumXYZField(0., 0., 0.), xyzField;
    //float totScaTime=0.f;
    vector<float> scaTimePerRepitition; 

    cout<<"Scalar fields start: "<<endl;
    clock_t clock1= clock();
    for(int j=0;j<nRepetitions;j++){
        //clock_t clock2= clock();
        for (int i = 0; i < n; ++i)
        {
            m1.GetFieldValue<vecgeom::kScalarFloat>(posVec[i], xyzField);
            sumXYZField += xyzField;
            //cout<<"Scalar: "<<xyzField<<endl;
        }
        // clock2 = clock() - clock2;
        // float clock2InFloat = ((float)clock2)/CLOCKS_PER_SEC;
        // scaTimePerRepitition.push_back(clock2InFloat/n);
        // totScaTime += clock2InFloat;
    }

    clock1 = clock() - clock1;
    cout<<sumXYZField<<endl;
    
    float clock1InFloat = ((float)clock1)/CLOCKS_PER_SEC;

    // float timeSum   = std::accumulate(scaTimePerRepitition.begin(), scaTimePerRepitition.end(), 0.0);
    // float timeMean  = timeSum/scaTimePerRepitition.size();
    // float timeSqSum = std::inner_product(scaTimePerRepitition.begin(), scaTimePerRepitition.end(), scaTimePerRepitition.begin(), 0.0);
    // float timeStDev = std::sqrt(timeSqSum/scaTimePerRepitition.size() - timeMean*timeMean);
 
    cout<<"\nScalar: "<<endl;
    cout<<"Total time is: "<<clock1InFloat <<endl;
    cout<<"Time per field value is : "<<clock1InFloat/(n*nRepetitions)*1e+9 << " ns "<<endl;
    // cout<<"totScaTime is: "<<totScaTime<<endl;
    // cout<<"time per call inside loop: "<<totScaTime/(n*nRepetitions)*1e+9 << " ns "<<endl;
    // cout<<"Mean time is: "<<timeMean*1e+9<<"ns"<<endl;
    // cout<<"Standard devi. is: "<<timeStDev*1e+9<<"ns"<<endl;
    return clock1InFloat;
}

float TimeVector(MagField &m1, const vecgeom::Vector<ThreeVector> &posVec, const int &n, const int &nRepetitions){
    cout<<"\nVector fields start: "<<endl;
    vecgeom::kVcFloat::precision_v vX;
    vecgeom::kVcFloat::precision_v vY;
    vecgeom::kVcFloat::precision_v vZ;

    //decides no. of doubles that one Vc vector can contain.
    //depends on architecture. 4 for avx. Later can be modified
    //to take the value itself from architecture
    int noOfDoubles = 8;
    //float totVecTime=0.f;
    vector<float> vecTimePerRepitition; 

    int inputVcLen = ceil(((float)n)/noOfDoubles);
    ThreeVecSimd_t *inputForVec = new ThreeVecSimd_t[inputVcLen];
    int init = 0;
    
    for (int i = 0; i < n; i=i+noOfDoubles){
       for (int j = 0; j < noOfDoubles; ++j){
            vX[j]= posVec[i+j].x();
            vY[j]= posVec[i+j].y();
            vZ[j]= posVec[i+j].z();
        }
        ThreeVecSimd_t Pos;
        Pos[0] = vX;
        Pos[1] = vY;
        Pos[2] = vZ;

        inputForVec[init] = Pos;
        init++;
    }
    
    clock_t clock1= clock();
    ThreeVecSimd_t sumXYZField, xyzField;
    for (int k = 0; k < nRepetitions; ++k){
        //clock_t clock2 = clock();
        for (int i = 0; i < inputVcLen; ++i){
            m1.GetFieldValue<vecgeom::kVcFloat>(inputForVec[i], xyzField);
            sumXYZField += xyzField;
            //cout<<"Vector: "<<xyzField<<endl;
        }
        // clock2 = clock() - clock2;
        // float clock2InFloat = ((float)clock2)/CLOCKS_PER_SEC;
        // vecTimePerRepitition.push_back(clock2InFloat/n);
        // totVecTime += clock2InFloat;
    }

    // float timeSum   = std::accumulate(vecTimePerRepitition.begin(), vecTimePerRepitition.end(), 0.0);
    // float timeMean  = timeSum/vecTimePerRepitition.size();
    // float timeSqSum = std::inner_product(vecTimePerRepitition.begin(), vecTimePerRepitition.end(), vecTimePerRepitition.begin(), 0.0);
    // float timeStDev = std::sqrt(timeSqSum/vecTimePerRepitition.size() - timeMean*timeMean);

    clock1 = clock() - clock1;
    cout<<sumXYZField<<endl;  
    float clock1InFloat = ((float)clock1)/CLOCKS_PER_SEC;  
        
    cout<<"\nVector: "<<endl;
    cout<<"Total time is: "<<clock1InFloat<<endl;
    cout<<"Time per field value is : "<<clock1InFloat/(n*nRepetitions)*1e+9 << " ns "<<endl;
    // cout<<"totVecTime is: "<<totVecTime<<endl;
    // cout<<"time per call inside loop: "<<totVecTime/(n*nRepetitions)*1e+9 << " ns "<<endl;
    // cout<<"Mean time is: "<<timeMean*1e+9<<"ns"<<endl;
    // cout<<"Standard devi. is: "<<timeStDev*1e+9<<"ns"<<endl;
    return clock1InFloat; 
}





int main(){

    MagField m1;
    //m1.ReadVectorData("/home/ananya/Work/MagFieldRoutine/cms2015.txt");
    //No absolute path required now. 
    //input file copied to build/examples/magneticfield/simplifiedCMS
    m1.ReadVectorData("examples/magneticfield/simplifiedCMS/cms2015.txt");
    //vector<ThreeVector> posVec;
    vecgeom::Vector<ThreeVector> posVec;
    
    int n = 1e+5;
    int nRepetitions =1000;

    // int n;
    // cout<<"Give input vector size: ";
    // cin>>n;
    // int nRepetitions;
    // cout<<"Give nRepetitions: ";
    // cin>>nRepetitions;

    srand(time(NULL));
    //srand(2);
    GenVecCart(posVec, n);
    cout<<"Size of posVec is: "<<posVec.size()<<endl;

    float Ts= TimeScalar(m1,posVec,n,nRepetitions);
    float Tv= TimeVector(m1,posVec,n,nRepetitions);

    cout<<"Vector speedup: " << Ts/ Tv <<endl;  

}


