 Geant4 Full CMS Benchmark
 ==========================

 In this directory you can find a CPU benchmark test of Geant4
 based on the full CMS detector, imported via a .gdml file.

 An installation of Geant4 including the GDML extension (which requires
 the XercesC package installed in the system) is required i.e. the
 Geant4 toolkit must be built with the -DGEANT4_USE_GDML=ON CMake option.


 ----------------------------
 - DETECTOR
 ----------------------------

 # Detector construction:
     The detector is imported from GDML file. Any GDML file can be set
     from the macro file by using the

     /mydet/setGdmlFile <gdml-file-name.gdml>

     The default value is "/.cms2018.gdml".

 # Magnetic filed:
     A constant magnetic field can be set through the macro command

     /mydet/setField <field-value> <unit>

     The default value is zero i.e. no magnetic field is created.


 -----------------------------
 - PRIMARY GENERATOR
 -----------------------------

 The primary generator is a particle gun that will generate primary particles
 at the (0,0,0) position with the following options:

 # Number of primaries per event:
     The number of primary particles per event can be set through the macro
     command

     /mygun/primaryPerEvt <number>

     By default, i.e. if it is not specified by the above command, the number
     of primary particles will be randomly selected for each individual event
     from the [1, 10] interval uniformly.

 # Primary particle energy:
     The primary particle energy can be set through the macro command

     /mygun/energy  <energy-value> <unit>

     By default, i.e. if it is not specified by the above command, the kinetic
     energy will be randomly selected for each individual primary particle from
     the [1 GeV, 100 GeV] uniformly.

 # Primary particle direction:
     The primary particle momentum direction can be set through the macro
     command

     /mygun/direction  <xdir-value> <ydir-value> <zdir-value>

     By default, i.e. if it is not specified by the above command, the
     momentum direction will be randomly selected for each individual primary
     particles from isotropic distribution.

 # Primary particle type:
     The primary particle type can be set through the macro command

     /mygun/particle <particle-name>

     By default, i.e. if it is not specified by the above command, the type
     will be randomly selected from a pre-defined list for each individual
     primary particle uniformly. The current list of particles includes e-,
     e+ and gamma particles. It can be extended by adding more particles to
     the list in the MyPrimaryGeneratorAction class.


 ------------------------
 - PHYSICS LIST
 ------------------------

 The Physics List can be specified as an input argument with the -f flag
 (e.g. -f FTFP_BERT). Notice that the name of the Geant4 built in Physics List
 must be in upper case, exactly as the corresponding header file. By default,
 i.e. if the Physics List name is not provided as an input argument, the
 special custom Physics List MyGVPhysicsList will be set (a Geant4 Physics
 List including only those particles, processes and models that are available
 and used in the corresponding GeantV application with exactly the same
 settings).


 -------------------------
 - BUILD, RUN and OPTIONS
 -------------------------

 The application can be built and used both with sequential and multithreaded
 Geant4 builds. In case of multithreaded Geant4 toolkit, the application will
 run in proper multithreaded mode.

 Run the executable with the --help option to see the available options:

 -m <Geant4-Macro-File> [MANDATORY; a standard Geant4 macro file name]
 -f <Physics-List-Name> [OPTIONAL;  physics list name (default: GV)]
 -p <NO-ARGUMENT>       [OPTIONAL;  run in performance mode (default: no)]

 A minimal set of "observable" is collected during the simulation per-primary
 particle type: mean energy deposit, mean charged and neutral step lengths,
 mean number of steps made by charged and neutral particles, mean number of
 secondary e-, e+ and gamma particles. The result is reported at the end of
 each event for each primary particle that were transported in the given event.
 At the end of the simulation a final report is printed showing the run time,
 the primary generator and magnetic field settings used during the run, the
 total number of events and primary particles transported and the per-primary
 type simulation statistics of the above-mentioned quantities.

 The simulation can be executed in "performance" mode by providing the -p
 input flag. No any user actions are created in this case beyond the
 only one RunAction (only for the Master-thread in case of MT) that will
 start and stop a timer at the beginning and the end of the simulation
 (initialization time won't be included). Therefore, there is no any scoring
 in this case.


 -------------------------
 - EXAMPLE
 -------------------------

 To execute the application using the <bench.g4> macro file, with the FTFP_BERT
 built in Geant4 Physics List in performance mode:

 ./full_cms -m bench.g4 -f FTFP_BERT -p


 ------------------------
 - FINAL REMARK
 ------------------------

 To get the most performant Geant4 build, one needs to build the Geant4 toolkit
 with the following CMake options (in addition to -DGEANT4_USE_GDML=ON):

 -DGEANT4_BUILD_MULTITHREADED=ON
 -DGEANT4_BUILD_VERBOSE_CODE=OFF
 -DGEANT4_BUILD_STORE_TRAJECTORY=OFF

 Then set the number of threads in the bench.g4 macro to the maximum available
 and execute the full_cms application with the -p flag.
