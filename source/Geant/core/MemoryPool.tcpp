
#pragma once

#include <cassert>
#include <sstream>
#include <stdexcept>
#include <type_traits>
#include <unistd.h>
#include <vector>

#include "Geant/core/CudaUtils.hpp"
#include "Geant/core/Tuple.hpp"

namespace geantx {
//======================================================================================//

namespace details {
//======================================================================================//
//  a page of memory on a device
//
template <typename _Tp, typename _Mem>
MemoryPage<_Tp, _Mem>::MemoryPage() : m_page(_alloc(m_allocs_per_page))
{
  if (m_allocs_per_page < 1) {
    std::stringstream msg;
    msg << "Error! " << __FUNCTION__ << " @ line " << __LINE__ << ": type "
        << typeid(type).name() << " of size " << sizeof(type) << " is larger than "
        << "the page size of " << GetPageSize();
    throw std::runtime_error(msg.str());
  }
}

template <typename _Tp, typename _Mem>
MemoryPage<_Tp, _Mem>::~MemoryPage()
{
  _free(static_cast<void *>(m_page));
}

template <typename _Tp, typename _Mem>
std::tuple<_Tp *, int64_t> MemoryPage<_Tp, _Mem>::alloc(const int64_t &_offset)
{
  m_offset = _offset;
  if (m_offset < 0 || m_page == nullptr) return std::tuple<_Tp *, int64_t>(nullptr, -1);
  type *ptr = m_page + m_offset;
  insert(ptr, m_offset);
  return std::make_tuple(ptr, m_offset);
}

template <typename _Tp, typename _Mem>
void MemoryPage<_Tp, _Mem>::free(_Tp *ptr)
{
  if (m_page == nullptr) {
    std::stringstream msg;
    msg << "Error! " << __FUNCTION__ << " @ line " << __LINE__
        << ": page is not allocated";
    throw std::runtime_error(msg.str());
  }

  if (m_associated.find(ptr) == m_associated.end()) {
    std::stringstream msg;
    msg << "Error! " << __FUNCTION__ << " @ line " << __LINE__ << ": pointer " << ptr
        << " now owned by MemoryPage instance";
    throw std::runtime_error(msg.str());
  }
  erase(ptr);
}

template <typename _Tp, typename _Mem>
void MemoryPage<_Tp, _Mem>::insert(type *ptr, const size_type &idx)
{
  if (ptr) {
    ++m_used;
    m_associated[ptr] = idx;
    m_available[idx]  = false;
  }
}

template <typename _Tp, typename _Mem>
void MemoryPage<_Tp, _Mem>::erase(type *ptr)
{
  auto idx         = m_associated.find(ptr)->second;
  m_available[idx] = true;
  m_used--;
}

template <typename _Tp, typename _Mem>
void MemoryPage<_Tp, _Mem>::erase(const size_type &idx)
{
  m_available[idx] = true;
  m_used--;
}

template <typename _Tp, typename _Mem>
int64_t MemoryPage<_Tp, _Mem>::next() const
{
  if (m_used == m_allocs_per_page) return -1;
  auto _offset = m_offset + 1;
  if (_offset == m_allocs_per_page) {
    for (size_type i = 0; i < m_available.size(); ++i) {
      if (m_available[i]) return i;
    }
  }
  return _offset;
}

//======================================================================================//

template <typename _Tp, typename _Mem>
MemoryPoolImpl<_Tp, _Mem>::MemoryPoolImpl(size_type npages)
{
  npages = std::max(npages, static_cast<size_type>(1));
  for (size_type i = 0; i < npages; ++i)
    m_page_list.push_back(new page_type());
}

template <typename _Tp, typename _Mem>
MemoryPoolImpl<_Tp, _Mem>::~MemoryPoolImpl()
{
  for (auto &itr : m_page_list)
    delete itr;
}

template <typename _Tp, typename _Mem>
std::tuple<_Tp *, int64_t, int64_t> MemoryPoolImpl<_Tp, _Mem>::alloc()
{
  auto _return = [&](std::tuple<_Tp *, int64_t> &ptr) {
    m_associated[std::get<0>(ptr)] = m_last_page;
    return std::make_tuple(std::get<0>(ptr), std::get<1>(ptr), m_last_page);
  };
  auto ptr = m_page_list[m_last_page]->alloc();
  if (std::get<0>(ptr)) {
    return _return(ptr);
  } else {
    for (size_type i = 0; i < m_page_list.size(); ++i) {
      ptr = m_page_list[i]->alloc();
      if (std::get<0>(ptr)) {
        m_last_page = i;
        return _return(ptr);
      }
    }
  }

  if (!add_page()) {
    std::stringstream msg;
    msg << "Error! " << __FUNCTION__ << " @ line " << __LINE__
        << ": page allocation error";
    throw std::runtime_error(msg.str());
  }

  // re-run with m_page_list[m_last_page]->alloc();
  ptr = m_page_list[m_last_page]->alloc();
  assert(std::get<0>(ptr) != nullptr);
  return _return(ptr);
}

template <typename _Tp, typename _Mem>
typename MemoryPoolImpl<_Tp, _Mem>::tuple_type MemoryPoolImpl<_Tp, _Mem>::alloc(
    const tuple_type &_other)
{
  auto _return = [&](std::tuple<_Tp *, int64_t> &ptr) {
    m_associated[std::get<0>(ptr)] = m_last_page;
    return std::make_tuple(std::get<0>(ptr), std::get<1>(ptr), m_last_page);
  };
  auto _last_page = std::get<2>(_other);
  auto _page_idx  = std::get<1>(_other);

  if (static_cast<size_type>(_last_page) >= m_page_list.size()) {
    if (!add_page()) {
      std::stringstream msg;
      msg << "Error! " << __FUNCTION__ << " @ line " << __LINE__
          << ": page allocation error";
      throw std::runtime_error(msg.str());
    }
  }

  m_last_page = _last_page;
  auto ptr    = m_page_list[m_last_page]->alloc(_page_idx);
  if (!std::get<0>(ptr)) {
    std::stringstream msg;
    msg << "Error! " << __FUNCTION__ << " @ line " << __LINE__
        << ": something went wrong";
    throw std::runtime_error(msg.str());
  }
  return _return(ptr);
}

template <typename _Tp, typename _Mem>
void MemoryPoolImpl<_Tp, _Mem>::free(_Tp *&ptr)
{
  if (!ptr) return;
  if (m_associated.find(ptr) == m_associated.end()) {
    std::stringstream msg;
    msg << "Error! " << __FUNCTION__ << " @ line " << __LINE__ << ": pointer " << ptr
        << " now owned by MemoryPool::MemoryPage instance";
    throw std::runtime_error(msg.str());
  }
  auto idx = m_associated.find(ptr)->second;
  auto itr = m_page_list[idx];
  if (itr->owns(ptr)) {
    itr->free(ptr);
    ptr = nullptr;
    return;
  }
  std::stringstream msg;
  msg << "Error! " << __FUNCTION__ << " @ line " << __LINE__ << ": pointer " << ptr
      << " not owned by any MemoryPool instance";
  throw std::runtime_error(msg.str());
}

template <typename _Tp, typename _Mem>
bool MemoryPoolImpl<_Tp, _Mem>::add_page()
{
  m_last_page = m_page_list.size();
  m_page_list.push_back(new page_type());
  return m_page_list.back()->valid();
}

template <typename _Tp, typename _Mem>
void MemoryPoolImpl<_Tp, _Mem>::delete_page()
{
  auto _delete_page = [&](size_type idx) {
    if (m_page_list[idx]->utilized()) return false;

    delete m_page_list[idx];
    if (idx + 1 == m_page_list.size()) {
      m_page_list.pop_back();
    } else {
      auto itr = m_page_list.begin();
      std::advance(itr, idx);
      m_page_list.erase(itr);
    }
    return true;
  };

  for (size_type i = 0; i < m_page_list.size(); ++i) {
    auto idx = m_page_list.size() - i - 1;
    if (_delete_page(idx)) return;
  }
  std::stringstream msg;
  msg << "Error! " << __FUNCTION__ << " @ line " << __LINE__ << ": cannot delete page "
      << "because all pages are being utilized";
  throw std::runtime_error(msg.str());
}

//======================================================================================//

} // namespace details

//======================================================================================//

} // namespace geantx
